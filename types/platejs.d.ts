/**
 * Plate.js JSON Output Interfaces
 * Defines the structure of JSON data generated by Plate.js editor
 */

// Base node interface
export interface PlateNode {
    id?: string;
    type?: string;
    children: PlateDescendant[];
}

// Text node interface
export interface PlateText {
    text: string;
    bold?: boolean;
    italic?: boolean;
    underline?: boolean;
    strikethrough?: boolean;
    code?: boolean;
}

// Union type for all possible descendants
export type PlateDescendant = PlateElement | PlateText;

// Element interface
export interface PlateElement extends PlateNode {
    type: string;
}

// Paragraph element
export interface ParagraphElement extends PlateElement {
    type: "p";
}

// Heading elements
export interface HeadingElement extends PlateElement {
    type: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
}

export interface H1Element extends PlateElement {
    type: "h1";
}

export interface H2Element extends PlateElement {
    type: "h2";
}

export interface H3Element extends PlateElement {
    type: "h3";
}

// Blockquote element
export interface BlockquoteElement extends PlateElement {
    type: "blockquote";
}

// List elements
export interface ListElement extends PlateElement {
    type: "ul" | "ol";
}

export interface ListItemElement extends PlateElement {
    type: "li";
}

// Image element
export interface ImageElement extends PlateElement {
    type: "image";
    url: string;
    alt?: string;
    width?: number;
    height?: number;
    caption?: string;
    align?: "left" | "center" | "right";
}

// Link element
export interface LinkElement extends PlateElement {
    type: "a";
    url: string;
    target?: "_blank" | "_self";
}

// Code block element
export interface CodeBlockElement extends PlateElement {
    type: "code_block";
    language?: string;
}

// Table elements
export interface TableElement extends PlateElement {
    type: "table";
}

export interface TableRowElement extends PlateElement {
    type: "tr";
}

export interface TableCellElement extends PlateElement {
    type: "td" | "th";
    colspan?: number;
    rowspan?: number;
    background?: string;
}

// Media elements
export interface MediaElement extends PlateElement {
    type: "media";
    url: string;
    mediaType: "image" | "video" | "audio";
    width?: number;
    height?: number;
}

// Horizontal rule
export interface HrElement extends PlateElement {
    type: "hr";
}

// Union type for all element types
export type PlateElementType =
    | ParagraphElement
    | HeadingElement
    | H1Element
    | H2Element
    | H3Element
    | BlockquoteElement
    | ListElement
    | ListItemElement
    | ImageElement
    | LinkElement
    | CodeBlockElement
    | TableElement
    | TableRowElement
    | TableCellElement
    | MediaElement
    | HrElement;

// Value type (root document)
export type PlateValue = PlateElementType[];

// Editor state
export interface PlateEditorState {
    children: PlateValue;
    selection?: {
        anchor: { path: number[]; offset: number };
        focus: { path: number[]; offset: number };
    };
}

// Serialized document (JSON output)
export interface PlateDocument {
    version: string;
    type: "doc";
    content: PlateValue;
    meta?: {
        createdAt?: string;
        updatedAt?: string;
        author?: string;
        title?: string;
        wordCount?: number;
    };
}

// Transform options for serialization
export interface PlateSerializeOptions {
    preserveSelection?: boolean;
    preserveIds?: boolean;
    minifyOutput?: boolean;
    includeMetadata?: boolean;
}

// Utility types for working with Plate JSON
export type PlateNodeType = PlateElement["type"];
export type PlateMarkType = keyof Omit<PlateText, "text">;

// Type guards
export function isPlateElement(node: PlateDescendant): node is PlateElement {
    return "type" in node && typeof node.type === "string";
}

export function isPlateText(node: PlateDescendant): node is PlateText {
    return "text" in node && typeof node.text === "string";
}

export function isElementType<T extends PlateElement>(
    node: PlateDescendant,
    type: T["type"],
): node is T {
    return isPlateElement(node) && node.type === type;
}

// Helper functions for JSON manipulation
export interface PlateJsonUtils {
    serialize: (value: PlateValue, options?: PlateSerializeOptions) => string;
    deserialize: (json: string) => PlateValue;
    getWordCount: (value: PlateValue) => number;
    extractText: (value: PlateValue) => string;
    findElements: <T extends PlateElement>(
        value: PlateValue,
        type: T["type"],
    ) => T[];
    replaceElement: (
        value: PlateValue,
        id: string,
        newElement: PlateElement,
    ) => PlateValue;
}

// Export common element creators
export interface PlateElementCreators {
    createParagraph: (text?: string) => ParagraphElement;
    createHeading: (
        level: 1 | 2 | 3 | 4 | 5 | 6,
        text?: string,
    ) => HeadingElement;
    createBlockquote: (text?: string) => BlockquoteElement;
    createImage: (url: string, alt?: string) => ImageElement;
    createLink: (url: string, text?: string) => LinkElement;
    createList: (type: "ul" | "ol", items?: string[]) => ListElement;
}

// Default values
export const DEFAULT_PLATE_VALUE: PlateValue = [
    {
        id: crypto.randomUUID(),
        type: "p",
        children: [{ text: "" }],
    },
];

export const PLATE_ELEMENT_TYPES = {
    PARAGRAPH: "p",
    HEADING_1: "h1",
    HEADING_2: "h2",
    HEADING_3: "h3",
    HEADING_4: "h4",
    HEADING_5: "h5",
    HEADING_6: "h6",
    BLOCKQUOTE: "blockquote",
    UNORDERED_LIST: "ul",
    ORDERED_LIST: "ol",
    LIST_ITEM: "li",
    IMAGE: "image",
    LINK: "a",
    CODE_BLOCK: "code_block",
    TABLE: "table",
    TABLE_ROW: "tr",
    TABLE_CELL: "td",
    TABLE_HEADER: "th",
    MEDIA: "media",
    HORIZONTAL_RULE: "hr",
} as const;

export const PLATE_MARK_TYPES = {
    BOLD: "bold",
    ITALIC: "italic",
    UNDERLINE: "underline",
    STRIKETHROUGH: "strikethrough",
    CODE: "code",
} as const;
